@Library('csm-shared-library') _

pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        timestamps()
    }

    environment {
        NAME = "cf-gitea-import"
        DESCRIPTION = "Base Image to facilitate importing product content into Gitea on Shasta systems."
        IS_STABLE = getBuildIsStable()
    }

    stages {
        stage("Set Versions") {
            steps {
                script {
                    // Get version from .version
                    def ver = sh(returnStdout: true, script: "head -1 .version").trim()
                    echo "Base version is ${ver}"
                
                    // Generate docker version string
                    def dockerver = getDockerBuildVersion(isStable: env.IS_STABLE)
                    echo "Docker version is ${dockerver}"
                
                    // Write docker version string to .docker_version
                    writeFile(file: ".docker_version", text: dockerver)
                }
            }
        }

        stage("Clone cms_meta_tools repo") {
            steps {
                withCredentials([gitUsernamePassword(credentialsId: 'jenkins-algol60-cray-hpe-github-integration')]) {
                    sh "make clone_cms_meta_tools"
                }
            }
        }

        stage("runBuildPrep") {
            steps {
                sh "make runbuildprep"
            }
        }

        stage("Lint") {
            steps {
                sh "make lint"
            }
        }

        stage('Build Image') {
            environment {
                DOCKER_VERSION = sh(returnStdout: true, script: "head -1 .docker_version").trim()
                DOCKER_ARGS = getDockerBuildArgs(name: env.NAME, description: env.DESCRIPTION, version: env.DOCKER_VERSION)
            }

            steps {
                echo "Docker args are ${env.DOCKER_ARGS}"
                sh "make image"
            }
        }

        stage('Publish ') {
            environment {
                DOCKER_VERSION = sh(returnStdout: true, script: "head -1 .docker_version").trim()
            }

            steps {
                script {
                    publishCsmDockerImage(image: env.NAME, tag: env.DOCKER_VERSION, isStable: env.IS_STABLE)
                }
            }
        }
    }
}
